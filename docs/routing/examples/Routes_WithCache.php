<?php
/**
 * Admin Module Routes with File-Based Cache
 * 
 * This implementation caches database-generated routes to a file,
 * avoiding database queries on every request.
 * 
 * Cache is invalidated when:
 * - Cache file doesn't exist
 * - Cache is older than 1 hour
 * - Manually cleared via clearCache() method
 * 
 * Usage:
 * 1. Rename this file to Routes.php (backup original first)
 * 2. Create cache directory: mkdir modules/cache
 * 3. Make it writable: chmod 755 modules/cache
 * 4. Clear cache after user CRUD: Routes::clearCache()
 */

namespace Admin\Routes;

use Admin\Controller;
use Admin\Model;

class Routes
{
    /**
     * Cache file location
     */
    private string $cacheFile;
    
    /**
     * Cache lifetime in seconds (1 hour = 3600)
     */
    private int $cacheLifetime = 3600;

    public function __construct()
    {
        // Cache in modules/cache directory
        $this->cacheFile = __DIR__ . '/../../cache/admin_routes.php';
    }

    /**
     * Register all admin routes
     */
    public function routes($router)
    {
        // ========================================
        // STATIC ROUTES (always present)
        // ========================================
        $router->addRoute('/admin', Controller::class, 'display');
        $router->addRoute('/admin/users', Controller::class, 'display');
        $router->addRoute('/admin/users/add', Controller::class, 'display');

        // ========================================
        // DYNAMIC ROUTES (cached)
        // ========================================
        
        // Check if we have a valid cache
        if ($this->isCacheValid()) {
            // Load routes from cache (FAST!)
            $this->loadCachedRoutes($router);
        } else {
            // Cache is missing or stale - rebuild it (SLOW)
            $this->rebuildCache($router);
        }
    }

    /**
     * Check if cache file exists and is still fresh
     */
    private function isCacheValid(): bool
    {
        // Cache doesn't exist
        if (!file_exists($this->cacheFile)) {
            return false;
        }

        // Check age
        $cacheAge = time() - filemtime($this->cacheFile);
        
        // Cache is too old
        if ($cacheAge >= $this->cacheLifetime) {
            return false;
        }

        return true;
    }

    /**
     * Load routes from cache file
     */
    private function loadCachedRoutes($router): void
    {
        // Include returns the array from cache file
        $cachedRoutes = include $this->cacheFile;
        
        // Register each cached route
        foreach ($cachedRoutes as $route) {
            $router->addRoute($route['path'], $route['controller'], $route['method']);
        }
    }

    /**
     * Query database and rebuild route cache
     */
    private function rebuildCache($router): void
    {
        // Query database for all users
        $model = new Model();
        $users = $model->getAllUsers();
        
        $cachedRoutes = [];
        
        // Generate edit and delete routes for each user
        foreach ($users as $user) {
            $userId = $user['id'];
            
            // Edit route
            $editPath = '/admin/users/edit/' . $userId;
            $cachedRoutes[] = [
                'path' => $editPath,
                'controller' => Controller::class,
                'method' => 'display'
            ];
            $router->addRoute($editPath, Controller::class, 'display');
            
            // Delete route
            $deletePath = '/admin/users/delete/' . $userId;
            $cachedRoutes[] = [
                'path' => $deletePath,
                'controller' => Controller::class,
                'method' => 'display'
            ];
            $router->addRoute($deletePath, Controller::class, 'display');
        }

        // Save to cache file
        $this->saveCache($cachedRoutes);
    }

    /**
     * Write routes to cache file
     */
    private function saveCache(array $routes): void
    {
        // Ensure cache directory exists
        $cacheDir = dirname($this->cacheFile);
        if (!is_dir($cacheDir)) {
            mkdir($cacheDir, 0755, true);
        }

        // Generate PHP file content
        $timestamp = date('Y-m-d H:i:s');
        $routeCount = count($routes);
        
        $content = <<<PHP
<?php
/**
 * Auto-generated Route Cache
 * 
 * Generated: {$timestamp}
 * Routes: {$routeCount}
 * 
 * DO NOT EDIT THIS FILE MANUALLY!
 * It will be regenerated automatically.
 */

return 
PHP;
        
        // Add the routes array (formatted nicely)
        $content .= var_export($routes, true) . ";\n";
        
        // Write to file
        file_put_contents($this->cacheFile, $content);
    }

    /**
     * Clear route cache (call after user CRUD operations)
     * 
     * Example usage in Controller:
     * 
     *   private function createUser() {
     *       $result = $this->model->createUser($data);
     *       if ($result) {
     *           \Admin\Routes\Routes::clearCache();
     *       }
     *   }
     */
    public static function clearCache(): void
    {
        $cacheFile = __DIR__ . '/../../cache/admin_routes.php';
        
        if (file_exists($cacheFile)) {
            unlink($cacheFile);
        }
    }

    /**
     * Get cache statistics (for debugging)
     */
    public static function getCacheStats(): array
    {
        $cacheFile = __DIR__ . '/../../cache/admin_routes.php';
        
        if (!file_exists($cacheFile)) {
            return [
                'exists' => false,
                'age' => 0,
                'routes' => 0,
                'size' => 0
            ];
        }

        $routes = include $cacheFile;
        
        return [
            'exists' => true,
            'age' => time() - filemtime($cacheFile),
            'routes' => count($routes),
            'size' => filesize($cacheFile),
            'created' => date('Y-m-d H:i:s', filemtime($cacheFile))
        ];
    }
}
